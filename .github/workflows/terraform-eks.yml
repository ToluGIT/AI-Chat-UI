name: Terraform EKS Workflow

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      destroy:
        description: "Run terraform destroy"
        required: false
        default: "false"
        type: choice
        options:
          - "true"
          - "false"

env:
  TF_LOG: INFO
  AWS_REGION: us-east-1
  TF_WORKING_DIR: EKS-TF

permissions:
  contents: read
  security-events: write
  id-token: write

jobs:
  terraform:
    if: github.event.inputs.destroy != 'true'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          audience: sts.amazonaws.com

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.5.0"

      - name: Run Checkov Security Scan
        uses: bridgecrewio/checkov-action@v12
        with:
          directory: ${{ env.TF_WORKING_DIR }}
          output_format: cli,sarif
          output_file_path: console,results.sarif
        continue-on-error: true

      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: results.sarif

      - name: Upload Checkov Report
        uses: actions/upload-artifact@v4
        with:
          name: checkov-report
          path: results.sarif

      - name: Terraform Init
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          terraform init \
            -backend-config="bucket=my-terraform-states-ai-chat-ui" \
            -backend-config="key=EKS/terraform.tfstate" \
            -backend-config="dynamodb_table=terraform-locks-ai-chat-ui"

      - name: Terraform Format Check
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform fmt -check
        continue-on-error: true

      - name: Terraform Plan
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform plan -out=tfplan

      - name: Terraform Apply
        if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform apply -auto-approve tfplan

      - name: Export EKS Cluster Info
        if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          CLUSTER_NAME=$(terraform output -raw cluster-name 2>/dev/null || echo "")
          CLUSTER_ENDPOINT=$(terraform output -raw cluster-endpoint 2>/dev/null || echo "")
          
          if [ -n "$CLUSTER_NAME" ] && [ -n "$CLUSTER_ENDPOINT" ]; then
            echo "cluster_name=${CLUSTER_NAME}" >> $GITHUB_OUTPUT
            echo "cluster_endpoint=${CLUSTER_ENDPOINT}" >> $GITHUB_OUTPUT
            echo "Successfully exported cluster information"
          else
            echo "Warning: Could not retrieve cluster information from Terraform outputs"
          fi

  terraform-destroy:
    if: github.event.inputs.destroy == 'true'
    runs-on: ubuntu-latest
    permissions:
      id-token: write
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          audience: sts.amazonaws.com

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.5.0"

      - name: Terraform Init
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          terraform init \
            -backend-config="bucket=my-terraform-states-ai-chat-ui" \
            -backend-config="key=EKS/terraform.tfstate" \
            -backend-config="dynamodb_table=terraform-locks-ai-chat-ui"

      - name: Terraform Destroy
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform destroy -auto-approve
