name: Terraform EKS Provisioning

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      terraform_action:
        description: 'Terraform action to perform'
        required: true
        default: 'apply'
        type: choice
        options:
          - apply
          - destroy

env:
  AWS_REGION: us-east-1
  TF_WORKING_DIR: EKS-TF
  TF_LOG: INFO
  TIMEOUT_MINUTES: 30
  CLUSTER_NAME: aichatui-EKS-Cluster

permissions:
  contents: read
  security-events: write
  id-token: write

jobs:
  terraform:
    runs-on: ubuntu-latest
    timeout-minutes: 30   
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          audience: sts.amazonaws.com

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.9.0"

      - name: Run Checkov Security Scan
        uses: bridgecrewio/checkov-action@v12
        with:
          directory: ${{ env.TF_WORKING_DIR }}
          output_format: cli,sarif
          output_file_path: console,results.sarif
        continue-on-error: true

      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: results.sarif

      - name: Debug Environment
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          echo "Working Directory Contents:"
          ls -la
          echo "Backend Configuration:"
          cat backend.tf
          echo "AWS Credentials Check:"
          aws sts get-caller-identity
          echo "S3 Bucket Check:"
          aws s3 ls s3://my-terraform-states-ai-chat-ui || echo "Bucket not accessible"
          echo "DynamoDB Table Check:"
          aws dynamodb describe-table --table-name terraform-locks-ai-chat-ui || echo "Table not accessible"

      - name: Create tfvars
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          cat > terraform.tfvars << EOF
          aws_region      = "us-east-1"
          project_name    = "${{ env.CLUSTER_NAME }}"
          cluster_version = "1.31"
          vpc_cidr        = "10.0.0.0/16"
          EOF

      - name: Terraform Init
        id: init
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          rm -rf .terraform .terraform.lock.hcl
          terraform init \
            -reconfigure \
            -backend=true \
            -backend-config="bucket=my-terraform-states-ai-chat-ui" \
            -backend-config="region=us-east-1" \
            -backend-config="key=EKS/terraform.tfstate" \
            -backend-config="dynamodb_table=terraform-locks-ai-chat-ui" \
            -backend-config="encrypt=true"
        timeout-minutes: 3

      - name: Terraform Plan
        id: plan
        if: github.event.inputs.terraform_action != 'destroy'
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          terraform plan -var-file=terraform.tfvars -out=tfplan
          echo "Plan completed"
        continue-on-error: true

      - name: Terraform Plan Destroy
        id: plan-destroy
        if: github.event.inputs.terraform_action == 'destroy'
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          terraform plan -destroy -var-file=terraform.tfvars -out=tfplan
          echo "Destroy plan completed"
        continue-on-error: true

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure' || steps.plan-destroy.outcome == 'failure'
        run: |
          echo "Terraform plan failed"
          exit 1

      - name: Terraform Apply
        id: apply
        if: github.event.inputs.terraform_action == 'apply' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform apply -auto-approve tfplan
        timeout-minutes: 20

      - name: Terraform Destroy
        id: destroy
        if: github.event.inputs.terraform_action == 'destroy'
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform apply -auto-approve tfplan
        timeout-minutes: 20

      - name: Export EKS Cluster Info
        id: export-cluster-info
        if: github.event.inputs.terraform_action == 'apply' && steps.apply.outcome == 'success'
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          CLUSTER_NAME=$(terraform output -raw cluster-name 2>/dev/null || echo "")
          CLUSTER_ENDPOINT=$(terraform output -raw cluster-endpoint 2>/dev/null || echo "")
          
          if [ -n "$CLUSTER_NAME" ] && [ -n "$CLUSTER_ENDPOINT" ]; then
            echo "cluster_name=${CLUSTER_NAME}" >> $GITHUB_OUTPUT
            echo "cluster_endpoint=${CLUSTER_ENDPOINT}" >> $GITHUB_OUTPUT
            echo "Successfully exported cluster information"
          else
            echo "Warning: Could not retrieve cluster information from Terraform outputs"
          fi

      - name: Upload Terraform Plan
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan
          path: ${{ env.TF_WORKING_DIR }}/tfplan
          retention-days: 5

    outputs:
      cluster_name: ${{ steps.export-cluster-info.outputs.cluster_name }}
      cluster_endpoint: ${{ steps.export-cluster-info.outputs.cluster_endpoint }}
