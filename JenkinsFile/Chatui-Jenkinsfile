pipeline{
    agent any
    tools{
        jdk 'jdk-17'
        nodejs 'node-19'
    }
    environment {
        SCANNER_HOME=tool 'sonar-scanner'
    }
    stages {
        stage('Checkout from Git'){
            steps{
                git branch: 'main', url: 'https://github.com/ToluGIT/AIChatUI.git'
            }
        }
        stage('Install Dependencies') {
            steps {
                sh "npm install"
            }
        }
        stage('NPM Audit') {
            steps {
                sh '''
                    npm audit --json > npm-audit.json || true
                    echo "NPM Audit completed and saved to npm-audit.json"
                '''
            }
        }
        stage("Sonarqube Analysis "){
            steps{
                withSonarQubeEnv('sonar-server') {
                    sh ''' $SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName=Chatbot \
                    -Dsonar.projectKey=Chatbot '''
                }
            }
        }
        stage("quality gate"){
           steps {
                script {
                    waitForQualityGate abortPipeline: false, credentialsId: 'Sonar-token' 
                }
            } 
        }
        stage('OWASP FS SCAN') {
            steps {
                withCredentials([string(credentialsId: 'nvd-api-key', variable: 'NVD_API_KEY')]) {
                    dependencyCheck(
                        odcInstallation: 'dp-check',
                        additionalArguments: """
                            --scan ./ 
                            --disableYarnAudit 
                            --disableNodeAudit 
                            --nvdApiKey '${NVD_API_KEY}'
                            --format 'ALL'
                            --prettyPrint
                        """
                    )
                    
                    // Publish results with corrected parameters
                    dependencyCheckPublisher(
                        pattern: '**/dependency-check-report.xml',
                        stopBuild: false,
                        unstableTotalHigh: 0,
                        unstableTotalMedium: 0,
                        unstableTotalLow: 0
                    )
                }
            }
        }
        stage('TRIVY FS SCAN') {
            steps {
                sh "trivy fs . > trivyfs.json"
            }
        }
        stage("Docker Build & Push"){
            steps{
                script{
                   withDockerRegistry(credentialsId: 'docker', toolName: 'docker'){   
                       sh "docker build -t chatbot ."
                       sh "docker tag chatbot toluid/aichatui:latest "
                       sh "docker push toluid/aichatui:latest "
                    }
                }
            }
        }
        stage("TRIVY"){
            steps{
                sh "trivy image toluid/aichatui:latest > trivy.json" 
            }
        }
        stage('Deploy to container'){
            steps{
                sh 'docker run -d --name aichatui -p 3000:3000 toluid/aichatui:latest'
            }
        }
    }
    }
